<template>
    <view class="detail_view_column">
        <view class="title_view">
            <view class="title_view_fir_part">
                <image class="detail_icon" src="../images/icon_detail_machine.png"></image>
                <text class="title_tx">机器信息</text>
            </view>
        </view>
        <view wx:if="{{isOldMachine}}" class="main_view">
            <view class="view_row" @tap="showNameplateInput">
                <text class="label_tx">机器编号：</text>
                <image class="edit_icon" src="../images/icon_btn_edit.png"></image>
            </view>
            <modal wx:if="{{hiddenNameplate}}" title="机器铭牌号" confirm-text="确定" no-cancel="true" @confirm="listenerNameplate" >
                <input @input="bindNameplateInput" class="part_input" value="{{oldNameplateInput}}" placeholder="请输入机器铭牌号"></input>
            </modal>
            <text class="get_input_tx">{{oldNameplateInput}}</text>
            <view class="view_row">
                <text class="label_tx">铭牌照片：</text>
            </view>
            <view class="view_row">
                <image class="photo_image" mode="aspectFill" wx:for="{{nameplateImage}}" @tap="changeNameplatePreview" data-src="{{item}}" src="{{item}}"></image>
                <image class="photo_image" src="../images/icon_btn_add_photo.png" @tap="previewNameplateImage"></image>
            </view>
        </view>
        <view wx:else class="main_view">
            <view class="view_row">
                <text class="label_tx">机器编号：</text>
                <text class="info_tx">{{machineDetail.nameplate? machineDetail.nameplate:'暂无'}}</text>
            </view>
            <view class="view_row" >
                <view class="view_row_half">
                    <text class="label_tx">机型：</text>
                    <text class="info_tx">{{machineDetail.machineType? machineDetail.machineType:'暂无'}}</text>
                </view>
                <view class="view_row_half">
                    <text class="label_tx">针数：</text>
                    <text class="info_tx">{{machineDetail.needleNum? machineDetail.needleNum:'暂无'}}</text>
                </view>
            </view>
            <view class="view_row">
                <view class="view_row_half">
                    <text class="label_tx">头数：</text>
                    <text class="info_tx">{{machineDetail.headNum? machineDetail.headNum:'暂无'}}</text>
                </view>
                <view class="view_row_half">
                    <text class="label_tx">头距：</text>
                    <text class="info_tx">{{machineDetail.headDistance? machineDetail.headDistance:'暂无'}}</text>
                </view>
            </view>
            <view class="view_row" >
                <view class="view_row_half">
                    <text class="label_tx">x行距：</text>
                    <text class="info_tx">{{machineDetail.xDistance? machineDetail.xDistance:'暂无'}}</text>
                </view>
                <view class="view_row_half">
                    <text class="label_tx">y行距：</text>
                    <text class="info_tx">{{machineDetail.yDistance? machineDetail.yDistance:'暂无'}}</text>
                </view>
            </view>
        </view>
    </view>
    <view class="detail_view_column">
        <view class="title_view">
            <view class="title_view_fir_part">
                <text class="title_tx">语音描述</text>
            </view>
        </view>
        <view class="main_view">
            <button class="record_btn" disabled="{{isRecording}}" loading="{{isRecording}}" type="{{isRecording ? 'warn' : 'default'}}" @touchstart="touchdown" @touchend="touchup">{{recordBtnVal}}</button>
            <view class="view_row" wx:if="{{hasRecorded}}">
                <text class="label_tx">语音：</text>
                <button wx:if='{{isPlaying}}' class="playing_btn" size="mini" loading="true">播放中...</button>
                <button wx:else class="player_btn" size="mini" @tap="playRecord">点击播放</button>
            </view>
        </view>
    </view>
    <view class="detail_view_column">
        <view class="title_view">
            <view class="title_view_fir_part">
                <text class="title_tx">图文描述</text>
            </view>
        </view>
        <view class="main_view">
            <view class="view_row" @tap="showTitleInput">
                <text class="label_tx">问题概述：</text>
                <image class="edit_icon" src="../images/icon_btn_edit.png"></image>
            </view>
            <modal wx:if="{{hiddenTitle}}" title="问题概述" confirm-text="确定" no-cancel="true" @confirm="listenerTitle" >
                <textarea @input="bindTitleInput" class="textareaInput" value="{{repairRequestInfo.repairTitle}}" placeholder="请在此输入问题概述（不能为空）"></textarea>
            </modal>
            <text class="get_input_tx">{{repairRequestInfo.repairTitle}}</text>
            <view class="view_row" @tap="showContentInput">
                <text class="label_tx">具体描述：</text>
                <image class="edit_icon" src="../images/icon_btn_edit.png"></image>
            </view>
            <modal wx:if="{{hiddenContent}}" title="具体描述" confirm-text="确定" no-cancel="true" @confirm="listenerContent" >
                <textarea @input="bindContentInput" class="textareaInput" value="{{repairRequestInfo.content}}" placeholder="请在此输入详细情况（不能为空）"></textarea>
            </modal>
            <text class="get_input_tx">{{repairRequestInfo.content}}</text>
            <view class="view_row">
                <text class="label_tx">故障照片（3张）：（长按删除）</text>
            </view>
            <view class="view_row">
                <image class="photo_image" mode="aspectFill" wx:for="{{previewImageArr}}" @tap="changePreview" @longtap="deleteImage" @touchstart="touchStart" @touchend="touchEnd" data-src="{{item}}" src="{{item}}"></image>
                <image hidden="{{hiddenPhoto}}" class="photo_image" src="../images/icon_btn_add_photo.png" @tap="previewImage"></image>
            </view>
        </view>
    </view>
    <view class="detail_view_column">
        <view class="title_view">
            <view class="title_view_fir_part">
                <text class="title_tx">联系方式</text>
            </view>
        </view>
        <view class="main_view">
            <view class="view_row">
                <text class="label_tx">联系人：</text>
                <picker class="picker_view" @change="bindPickerChange" value="{{index}}" range="{{customerListArr}}">
                    <text class="picker_tx">{{customerListArr[index]}}</text>
                </picker>
            </view>
            <view class="view_row">
                <text class="label_tx">电话：</text>
                <text class="info_tx">{{customerList[index].phone? customerList[index].phone: '暂无'}}</text>
            </view>
            <view class="view_row">
                <text class="label_tx">地址：</text>
                <text class="info_tx">{{customerList[index].address? customerList[index].address: '暂无'}}</text>
            </view>
        </view>
    </view>
    <button class="single_button" @tap="uploadMachineInfo">提交</button>
</template>
<style lang="less">
    page {
      padding-bottom: 120rpx;
    }
    .record_btn {
        width: 300rpx;
        margin-top: 30rpx;
        border-radius: 100rpx;
        border: 4rpx solid #ADC7C7;
    }
    .record_img {
        width: 42rpx;
        height: 72rpx;
        margin-left: 39rpx;
    }
    .player_btn {
        width: 500rpx;
        opacity: 0.80;
        background: #007474;
        color: #ffffff;
        border-radius: 100rpx;
        margin-left: 15rpx;
    }
    .playing_btn {
        width: 500rpx;
        opacity: 0.24;
        background: #007474;
        color: #ffffff;
        border-radius: 100rpx;
        border: 2rpx solid #ADC7C7;
        margin-left: 15rpx;
    }
    .part_input {
        width: 500rpx;
        height: 66rpx;
        border: 1rpx solid #007474;
        border-radius: 6rpx;
        font-family: PingFangSC-Regular;
        font-size: 30rpx;
        color: #3B403D;
        letter-spacing: 0;
        margin-left: 15rpx;
        margin-right: 15rpx;
        padding-left: 10rpx;
    }
</style>
<script>
    /* eslint-disable no-undef,eqeqeq */

    import wepy from 'wepy'
    import MachineDetails from '../components/machine_details'
    import api from '@/api/api'
    import tip from '@/utils/tip'
    import {
        USER_ID
    } from '@/utils/constant'

    export default class RequestRepair extends wepy.page {
      config = {
        navigationBarTitleText: '机器报修'
      }
      components = {
        machinedetails: MachineDetails
      }
      data = {
        hiddenNameplate: false,
        hiddenTitle: false,
        hiddenContent: false,
        hiddenPhoto: false,
        machineDetail: {},
        customerList: [],
        customerListArr: [],
        index: 0,
        nameplateImage: [],
        oldNameplateInput: '',
        titleInput: '',
        contentInput: '',
        recordBtnVal: '按住 说话',
        recordTempSrc: '',
        previewImageArr: [],
        touchStartTime: 0,
        touchEndTime: 0,
        count: 0,
        isOldMachine: false,
        isRecording: false,
        hasRecorded: false,
        isPlaying: false,
        customerPhone: '暂无',
        customerAddress: '暂无',
        repairRequestInfo: {
          nameplatePicture: '',
          voice: '',
          pictures: '',
          nameplate: '',
          repairTitle: '',
          content: '',
          customer: 0,
          createTime: '',
          uploadFilesAmount: '',
          alreadyUploadedFilesNumber: '0'
        }
      };
      methods = {
        showNameplateInput() {
          this.hiddenNameplate = true
          this.$apply()
        },
        listenerNameplate() {
          this.hiddenNameplate = false
          this.$apply()
        },
        bindNameplateInput(e) {
          this.oldNameplateInput = e.detail.value
        },
        async previewNameplateImage() {
          let res = await wepy.chooseImage({
            count: 1,
            sizeType: 'compressed '
          })
          if (res.errMsg === 'chooseImage:ok') {
            let tempFilePaths = res.tempFilePaths
            this.nameplateImage = tempFilePaths
            console.log('nameplate image src: ')
            console.log(tempFilePaths)
            this.$apply()
          }
        },
        changeNameplatePreview(e) {
          var self = this
          wepy.previewImage({
            current: e.currentTarget.dataset.src,
            urls: self.data.nameplateImage
          })
        },
        showTitleInput() {
          this.hiddenTitle = true
          this.$apply()
        },
        listenerTitle() {
          this.hiddenTitle = false
          this.$apply()
        },
        bindTitleInput(e) {
          this.repairRequestInfo.repairTitle = e.detail.value
        },
        showContentInput() {
          this.hiddenContent = true
          this.$apply()
        },
        listenerContent() {
          this.hiddenContent = false
          this.$apply()
        },
        bindContentInput(e) {
          this.repairRequestInfo.content = e.detail.value
        },
        async previewImage() {
          let res = await wepy.chooseImage({
            count: 3,
            sizeType: 'compressed '
          })
          if (res.errMsg === 'chooseImage:ok') {
            let tempFilePaths = res.tempFilePaths
            if (this.previewImageArr.length >= 3) {
              tip.alert('最多3张')
            } else if ((this.previewImageArr.length + tempFilePaths.length) > 3) {
              tip.alert('最多3张')
              this.hiddenPhoto = true
              for (var i = 0; i < (3 - this.previewImageArr.length); i++) {
                this.previewImageArr = this.previewImageArr.concat(tempFilePaths[i])
              }
              this.$apply()
            } else {
              this.previewImageArr = this.previewImageArr.concat(tempFilePaths)
              if (this.previewImageArr.length == 3) {
                this.hiddenPhoto = true
              }
              this.$apply()
            }
          }
        },
        // 按钮触摸开始触发的事件
        touchStart(e) {
          console.log('touchStart: ', e)
          this.touchStartTime = e.timeStamp
        },

        // 按钮触摸结束触发的事件
        touchEnd(e) {
          console.log('touchEnd: ', e)
          this.touchEndTime = e.timeStamp
        },
        changePreview(e) {
          // 控制点击事件在450ms内触发，加这层判断是为了防止长按时会触发点击事件
          if (this.touchEndTime - this.touchStartTime < 450) {
            console.log('changePreview: ', e)
            wepy.previewImage({
              current: e.currentTarget.dataset.src,
              urls: this.previewImageArr
            })
          }
        },
        // 长按删除图片
        deleteImage(e) {
          console.log('longTap: ', e)
          for (var i = 0; i < this.previewImageArr.length; i++) {
            if (this.previewImageArr[i] == e.currentTarget.dataset.src) {
              this.previewImageArr.splice(i, 1)
              this.hiddenPhoto = false
              tip.alert('已删除')
              this.$apply()
              break
            }
          }
        },
        touchdown() {
          console.log('手指anxia了...')
          this.isRecording = true
          this.recordBtnVal = '松开结束'
          const recorderManager = wepy.getRecorderManager()
          recorderManager.start({format: 'mp3'})
          recorderManager.onStart(() => {
            console.log('recorder start')
          })
          recorderManager.onPause(() => {
            console.log('recorder pause')
          })
          recorderManager.onStop((res) => {
            console.log('recorder stop ', res)
            this.recordTempSrc = res.tempFilePath
            this.hasRecorded = true
            this.$apply()
          })
        },
        touchup() {
          console.log('手指抬起了...')
          this.isRecording = false
          this.recordBtnVal = '按住 说话'
          wepy.getRecorderManager().stop()
        },
        playRecord() {
          this.isPlaying = true
          const innerAudioContextRecord = wepy.createInnerAudioContext()
          innerAudioContextRecord.autoplay = true
          innerAudioContextRecord.src = this.recordTempSrc
          innerAudioContextRecord.onPlay(() => {
            console.log('开始播放')
          })
          innerAudioContextRecord.onPause(() => {
            console.log('pause了')
            this.isPlaying = false
            this.$apply()
          })
          innerAudioContextRecord.onStop(() => {
            console.log('stop了')
            this.isPlaying = false
            this.$apply()
          })
          innerAudioContextRecord.onError((res) => {
            console.log(res)
            console.log(res.errCode)
            this.isPlaying = false
            this.$apply()
          })
          innerAudioContextRecord.onEnded(() => {
            console.log('bo完了')
            this.isPlaying = false
            this.$apply()
          })
        },
        bindPickerChange: function (e) {
          this.index = e.detail.value
          this.$apply()
        },
        uploadMachineInfo() {
          if (!this.repairRequestInfo.repairTitle) {
            tip.alert('请输入问题概述')
          } else if (!this.repairRequestInfo.content) {
            tip.alert('请输入具体描述')
          } else if (!this.recordTempSrc) {
            tip.alert('请录制报修语音')
          } else if (this.previewImageArr.length == 0) {
            tip.alert('请拍下故障照片')
          } else {
            this.repairRequestInfo.customer = this.customerList[this.index].id
            if (this.isOldMachine) {
              console.log('老机器报修： ')
              this.repairRequestInfo.nameplate = this.oldNameplateInput
              this.repairRequestInfo.uploadFilesAmount = (this.previewImageArr.length + 2).toString()
              let repairRequestInfoJson = JSON.stringify(this.repairRequestInfo)
              this.addRepairRequestInfo(repairRequestInfoJson, 'true')
            } else {
              this.repairRequestInfo.nameplate = this.machineDetail.nameplate
              this.repairRequestInfo.uploadFilesAmount = (this.previewImageArr.length + 1).toString()
              let repairRequestInfoJson = JSON.stringify(this.repairRequestInfo)
              console.log('上传xinxi： ', repairRequestInfoJson)
              this.addRepairRequestInfo(repairRequestInfoJson, 'false')
            }
          }
        }
      };
      async addRepairRequestInfo(repairRequestInfoJson, isOldMachine) {
        const uploadRepairRequestInfoJson = await api.uploadRepairRequestInfo({
          query: {
            repairRequestInfo: repairRequestInfoJson,
            isOldMachine: isOldMachine
          }
        })
        console.log('上传结果： ', uploadRepairRequestInfoJson)
        if (uploadRepairRequestInfoJson.data.code === 200) {
          this.repairRequestInfo.id = uploadRepairRequestInfoJson.data.data
          repairRequestInfoJson = JSON.stringify(this.repairRequestInfo)
          if (this.isOldMachine) {
            this.addRepairNameplateSrc(repairRequestInfoJson)
          } else {
            this.addRepairVoiceSrc(repairRequestInfoJson)
          }
        } else {
          tip.confirm('网络错误！提交出错，请重新提交！')
        }
      }
      async addRepairNameplateSrc(repairRequestInfoJson) {
        let updateNameplaceSrcJson = await api.uploadRepairRequestFiles({
          query: {
            filePath: this.nameplateImage[0],
            name: 'file',
            data: {
              repairRequestInfo: repairRequestInfoJson,
              fileType: 'FILE_TYPE_REPAIR_REQUEST_NAMEPLATE_IMAGE',
              fileNumber: 1
            }
          }
        })
        console.log('update结果： ', updateNameplaceSrcJson)
        let returnNameplateSrcData = JSON.parse(updateNameplaceSrcJson.data)
        if (returnNameplateSrcData.code === 200) {
          repairRequestInfoJson = JSON.stringify(returnNameplateSrcData.data)
          console.log('return结果： ', repairRequestInfoJson)
          this.addRepairVoiceSrc(repairRequestInfoJson)
        } else {
          tip.confirm('网络错误！提交出错，请重新提交！')
        }
      }
      async addRepairVoiceSrc(repairRequestInfoJson) {
        let updateVoiceSrcJson = await api.uploadRepairRequestFiles({
          query: {
            filePath: this.recordTempSrc,
            name: 'file',
            data: {
              repairRequestInfo: repairRequestInfoJson,
              fileType: 'FILE_TYPE_REPAIR_REQUEST_VOICE',
              fileNumber: 1
            }
          }
        })
        console.log('update结果： ', updateVoiceSrcJson)
        let returnVoiceSrcData = JSON.parse(updateVoiceSrcJson.data)
        if (returnVoiceSrcData.code === 200) {
          repairRequestInfoJson = JSON.stringify(returnVoiceSrcData.data)
          console.log('return结果： ', repairRequestInfoJson)
          this.addRepairImageSrc(repairRequestInfoJson, this.count)
        } else {
          tip.confirm('网络错误！提交出错，请重新提交！')
        }
      }
      async addRepairImageSrc(repairRequestInfoJson, count) {
        let updateImageSrcJson = await api.uploadRepairRequestFiles({
          query: {
            filePath: this.previewImageArr[count],
            name: 'file',
            data: {
              repairRequestInfo: repairRequestInfoJson,
              fileType: 'FILE_TYPE_REPAIR_REQUEST_IMAGE',
              fileNumber: count + 1
            }
          }
        })
        console.log('update结果： ', updateImageSrcJson)
        let returnImageSrcData = JSON.parse(updateImageSrcJson.data)
        if (returnImageSrcData.code === 200) {
          console.log('count的值： ', count)
          if (count >= this.previewImageArr.length - 1) {
            tip.confirm('报修成功！已通知厂家尽快处理！', 'BACK')
          } else {
            count++
            repairRequestInfoJson = JSON.stringify(returnImageSrcData.data)
            console.log('return结果： ', repairRequestInfoJson)
            this.addRepairImageSrc(repairRequestInfoJson, count)
          }
        } else {
          tip.confirm('网络错误！提交出错，请重新提交！')
        }
      }

      events = {};

      async onLoad(options) {
        if (options.machineDetail === '0') {
          this.isOldMachine = true
        } else {
          this.isOldMachine = false
          this.machineDetail = JSON.parse(options.machineDetail)
          console.log(this.machineDetail)
        }
        let userId = wepy.getStorageSync(USER_ID)
        this.getCustomerList(userId)
        let res = await wepy.getSetting()
        if (!res.authSetting['scope.record']) {
          wepy.authorize({scope: 'scope.record'})
        }
        this.$apply()
      };
      async getCustomerList(userId) {
          // 先获取对应公司id
        let getCustomerCompanyJson = await api.getUserDetail({
          query: {
            id: userId
          }
        })
        if (getCustomerCompanyJson.data.code !== 200) {
          tip.confirm('网络错误！获取联系人信息出错！', 'BACK')
        } else {
          this.customerList = this.customerList.concat(getCustomerCompanyJson.data.data)
            // 根据用户id和公司id获取联系人信息
          let getCustomerListJson = await api.getCustomerListByCompany({
            query: {
              roleId: 6,
              customerCompany: getCustomerCompanyJson.data.data.customerCompany
            }
          })
          if (getCustomerListJson.data.code !== 200) {
            tip.confirm('网络错误！获取联系人信息出错！')
          } else {
            for (var ii = 0; ii < getCustomerListJson.data.data.list.length; ii++) {
              if (getCustomerListJson.data.data.list[ii].valid == '1') {
                this.customerList = this.customerList.concat(getCustomerListJson.data.data.list[ii])
              }
            }
            for (var i = 0; i < this.customerList.length; i++) {
              this.customerListArr = this.customerListArr.concat(this.customerList[i].account)
            }
            console.log(this.customerListArr)
            this.$apply()
          }
        }
      }
    }
</script>
